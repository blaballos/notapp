---
import 'flowbite'
import Layout from "../layouts/Layout.astro";
import HeaderBoard from "../components/HeaderBoard.astro";
import Status from "../components/Status.astro";
import CloseIcon from '../components/icons/CloseIcon.astro';
import AlertIcon from '../components/icons/AlertIcon.astro';
import DescriptionIcon from '../components/icons/DescriptionIcon.astro';
import PencilIcon from '../components/icons/PencilIcon.astro';
---

<Layout title="Tablero"
description="Organiza tu proyecto, asigna tareas y administra tus tiempos con el tablero de Notapp.">
    <HeaderBoard />
    <div id="cards-container" class="max-w-7xl h-screen items-start grid grid-cols-4 gap-x-4 mx-auto mt-8">
        <Status id="toDo" title="Por Realizar" class="border-red-500" dataColum='toDo'></Status>
        <Status id="inProgress" title="En Progreso" class="border-yellow-500" dataColum='inProgress'></Status>
        <Status id="inReview" title="En Revisión" class="border-orange-500" dataColum='inReview'></Status>
        <Status id="completed" title="Finalizados" class="border-green-500" dataColum='completed'></Status>
    </div>

    <!-- Main modal -->
    <div id="crud-modal" tabindex="-1" aria-hidden="true" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <div class="relative p-4 w-full max-w-md max-h-full">
            <!-- Modal content -->
            <div class="relative bg-black rounded-lg shadow-lg border border-gray-700">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-700">
                    <h3 class="text-xl font-semibold text-white">
                        Crear nueva tarea
                    </h3>
                    <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-black rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center transition duration-200" data-modal-toggle="crud-modal">
                        <CloseIcon />  
                        <span class="sr-only">Cerrar</span>
                    </button>
                </div>
                <!-- Modal body -->
                <form class="p-4 md:p-5">
                    <div class="grid gap-4 mb-4 grid-cols-2">
                        <div class="col-span-2">
                            <label for="name" class="inline-flex items-center justify-start mb-2 text-lg font-medium text-white gap-x-2"><PencilIcon class="size-5"/>Título</label>
                            <input type="text" name="name" id="titleTask" class="bg-transparent border border-gray-700 text-white text-sm rounded-lg focus:ring-white focus:border-white block w-full p-2.5 mb-1" placeholder="Introducir título" required>
                        </div>
                        <div class="col-span-2">
                            <label for="name" class="inline-flex items-center justify-start mb-2 text-lg font-medium text-white gap-x-2"><DescriptionIcon class="size-5"/>Descripción</label>
                            <textarea id="descriptionTask" rows="4" class="block p-2.5 w-full text-sm text-white bg-transparent rounded-lg border border-gray-700 focus:ring-white focus:border-white resize-none mb-1" placeholder="Introducir descripción" required></textarea>                    
                            <span id="alert-span" class="hidden text-xs font-medium text-red-500">Por favor, complete todos los campos</span>
                        </div>
                        <div class="col-span-2 sm:col-span-1">
                            <label for="priority" class="inline-flex items-center justify-start mb-2 text-lg font-medium text-white gap-x-2"><AlertIcon class="size-5"/>Prioridad</label>
                            <select id="priority" class="bg-black border border-gray-700 text-white text-sm rounded-lg focus:ring-white focus:border-white block w-full p-2.5">
                                <option value="ALTA">ALTA</option>
                                <option value="MEDIA">MEDIA</option>
                                <option selected value="BAJA">BAJA</option>
                            </select>
                        </div>
                    </div>
                    <button id="addTask" data-modal-hide="crud-modal" type="button" class="w-full text-white inline-flex justify-center items-center bg-blue-500 hover:bg-blue-700 font-semibold rounded-lg text-md px-5 py-2.5 text-center transition duration-300">
                        Añadir tarea
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
            // Funciones de almacenamiento
            const saveTasks = () => {
                const tasks = [];
                document.querySelectorAll(".task-card").forEach(card => {
                    tasks.push({
                        id: card.id,
                        title: card.querySelector("h2").innerText,
                        description: card.querySelector("p").innerText,
                        priority: card.querySelector("span").innerText,
                        column: card.closest(".container")?.id || "toDo"
                    });
                });
                localStorage.setItem("tasks", JSON.stringify(tasks));
            };

            const loadTasks = () => {
                const tasks = JSON.parse(localStorage.getItem("tasks") || "[]");
                tasks.forEach(insertTaskIntoColumn);
            };

            // Función para insertar una tarea en una columna
            function insertTaskIntoColumn(task) {
                const column = document.getElementById(task.column);
                if (!column) return;

                const taskElement = document.createElement("div");
                taskElement.classList.add("task-card", "rounded-lg", "bg-transparent", "border", "border-gray-700", "rounded-xl", "hover:cursor-grab");
                taskElement.setAttribute("draggable", "true");
                taskElement.id = task.id;

                const priorityColors = {
                    'ALTA': 'text-red-500 border-red-500',
                    'MEDIA': 'text-yellow-500 border-yellow-500',
                    'BAJA': 'text-green-500 border-green-500',
                }

                const priorityClass = priorityColors[task.priority] || 'text-blue-500 border-blue-500';

                taskElement.innerHTML = `
                    <div class="w-full flex flex-col space-y-2">
                        <div class="flex justify-between items-center border-b border-gray-700 p-2">
                            <h2 class="text-white text-md font-semibold">${task.title}</h2>
                            <button class="delete-card text-gray-400 bg-transparent hover:bg-gray-200 hover:text-black rounded-lg text-lg font-bold w-8 h-8 ms-auto inline-flex justify-center items-center transition duration-200">x</button>
                        </div>
                        <div class="w-full p-2 space-y-2">
                            <p class="text-white text-sm font-medium mb-2">${task.description}</p>
                            <span class="${priorityClass} p-1 rounded-lg border text-xs font-bold">${task.priority}</span>
                        </div>
                    </div>
                `;

                taskElement.addEventListener("dragstart", (e) => {
                    e.dataTransfer.setData("text/plain", taskElement.id);
                });

                taskElement.querySelector(".delete-card").addEventListener("click", () => {
                    taskElement.remove();
                    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
                    tasks = tasks.filter(t => t.id !== task.id);
                    localStorage.setItem("tasks", JSON.stringify(tasks));
                });

                column.querySelector(".container").appendChild(taskElement);
            }

            // Manejo de columnas y drag and drop
            const columns = document.querySelectorAll(".container");
            columns.forEach(container => {
                container.addEventListener("dragover", (e) => e.preventDefault());
                container.addEventListener("drop", (e) => {
                    e.preventDefault();
                    const cardId = e.dataTransfer.getData("text/plain");
                    const draggedCard = document.getElementById(cardId);
                    if (draggedCard) {
                        container.appendChild(draggedCard);
                        saveTasks();
                    }
                });
            });

            // Manejo del formulario para agregar tareas
            const addTaskButton = document.getElementById('addTask');
            addTaskButton.addEventListener("click", (e) => {
                e.preventDefault();
                const title = document.getElementById("titleTask").value.trim();
                const description = document.getElementById("descriptionTask").value.trim();
                const priority = document.getElementById("priority").value;
                if (!title || !description) {
                    document.getElementById('alert-span').style.display = 'inline-flex';
                    return;
                }
                const newTask = {
                    id: `task-${Date.now()}`,
                    title,
                    description,
                    priority,
                    column: "toDo"
                };
                insertTaskIntoColumn(newTask);
                let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
                tasks.push(newTask);
                localStorage.setItem("tasks", JSON.stringify(tasks));
                document.getElementById("titleTask").value = "";
                document.getElementById("descriptionTask").value = "";
            });

            loadTasks();
        });
    </script>
</Layout>

<style>
    body, html {
        background: #000;
    }
</style>
